// <auto-generated />
using FinalLibraryProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FinalLibraryProject.Migrations
{
    [DbContext(typeof(FinalLibraryDatabaseContext))]
    partial class FinalLibraryDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinalLibraryProject.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("LibraryId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.Checkouts", b =>
                {
                    b.Property<int>("CheckoutId")
                        .HasColumnName("CheckoutID");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<double>("LateFee");

                    b.Property<int>("LibraryId")
                        .HasColumnName("LibraryID");

                    b.Property<DateTime?>("TimeReturned")
                        .HasColumnType("datetime");

                    b.HasKey("CheckoutId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Checkouts");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.CurrentlyPresentLookup", b =>
                {
                    b.Property<int>("CurrentlyPresentId")
                        .HasColumnName("CurrentlyPresentID");

                    b.Property<string>("CurrentlyPresentValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CurrentlyPresentId");

                    b.ToTable("CurrentlyPresentLookup");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.CurrentlyReservedLookup", b =>
                {
                    b.Property<int>("CurrentlyReservedId")
                        .HasColumnName("CurrentlyReservedID");

                    b.Property<string>("CurrentlyReservedValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("CurrentlyReservedId");

                    b.ToTable("CurrentlyReservedLookup");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.CurrentlySuspendedLookup", b =>
                {
                    b.Property<int>("CurrentlySuspendedId")
                        .HasColumnName("CurrentlySuspendedID");

                    b.Property<string>("CurrentlySuspendedValue")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("CurrentlySuspendedId");

                    b.ToTable("CurrentlySuspendedLookup");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.GenreTypeLookup", b =>
                {
                    b.Property<int>("GenreTypeId")
                        .HasColumnName("GenreTypeID");

                    b.Property<string>("GenreTypeValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("GenreTypeId");

                    b.ToTable("GenreTypeLookup");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.ItemTypeLookup", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .HasColumnName("ItemTypeID");

                    b.Property<string>("ItemTypeValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypeLookup");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.LibraryItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<string>("AuthorFirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("AuthorLastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<double>("Cost");

                    b.Property<int>("CurrentlyPresent");

                    b.Property<int>("CurrentlyReserved");

                    b.Property<DateTime>("DateAddedToSystem")
                        .HasColumnType("datetime");

                    b.Property<string>("DetailDescription")
                        .IsUnicode(false);

                    b.Property<int?>("Genre");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnName("ISBN")
                        .HasColumnType("char(13)");

                    b.Property<int>("ItemType");

                    b.Property<string>("LibrarySection")
                        .IsRequired()
                        .HasColumnType("char(5)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("YearPublished");

                    b.HasKey("ItemId");

                    b.HasIndex("CurrentlyPresent");

                    b.HasIndex("Genre");

                    b.HasIndex("ItemType");

                    b.ToTable("LibraryItem");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.LibraryMember", b =>
                {
                    b.Property<int>("LibraryId")
                        .HasColumnName("LibraryID");

                    b.Property<int>("Age");

                    b.Property<string>("CityAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("CurrentlySuspended");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("MaxCheckoutAmount");

                    b.Property<int>("MemberType");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("PinNumber");

                    b.Property<string>("StateAddress")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("TimeAccountCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("LibraryId");

                    b.HasIndex("CurrentlySuspended");

                    b.HasIndex("MemberType");

                    b.ToTable("LibraryMember");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.MemberTypeLookup", b =>
                {
                    b.Property<int>("MemberTypeId")
                        .HasColumnName("MemberTypeID");

                    b.Property<string>("MemberTypeValue")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("MemberTypeId");

                    b.ToTable("MemberTypeLookup");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.Transactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnName("TransactionID");

                    b.Property<double>("CurrentAccountBalance")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(([PreviousAccountBalance]+[CurrentFine])-[CurrentPayment])");

                    b.Property<double>("CurrentFine");

                    b.Property<double>("CurrentPayment");

                    b.Property<int>("LibraryId")
                        .HasColumnName("LibraryID");

                    b.Property<double>("PreviousAccountBalance");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.WaitList", b =>
                {
                    b.Property<int>("WaitListId")
                        .HasColumnName("WaitListID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("LibraryId")
                        .HasColumnName("LibraryID");

                    b.Property<DateTime>("TimeWaitListed")
                        .HasColumnType("datetime");

                    b.HasKey("WaitListId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LibraryId");

                    b.ToTable("WaitList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.ApplicationUser", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.LibraryMember", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.Checkouts", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.LibraryItem", "Item")
                        .WithMany("Checkouts")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Checkouts_LibraryItem");

                    b.HasOne("FinalLibraryProject.Models.LibraryMember", "Library")
                        .WithMany("Checkouts")
                        .HasForeignKey("LibraryId")
                        .HasConstraintName("FK_Checkouts_LibraryMember");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.LibraryItem", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.CurrentlyPresentLookup", "CurrentlyPresentNavigation")
                        .WithMany("LibraryItem")
                        .HasForeignKey("CurrentlyPresent")
                        .HasConstraintName("FK_LibraryItem_CurrentlyPresentLookup");

                    b.HasOne("FinalLibraryProject.Models.CurrentlyReservedLookup", "CurrentlyPresent1")
                        .WithMany("LibraryItem")
                        .HasForeignKey("CurrentlyPresent")
                        .HasConstraintName("FK_LibraryItem_CurrentlyReservedLookup");

                    b.HasOne("FinalLibraryProject.Models.GenreTypeLookup", "GenreNavigation")
                        .WithMany("LibraryItem")
                        .HasForeignKey("Genre")
                        .HasConstraintName("FK_LibraryItem_GenreTypeLookup");

                    b.HasOne("FinalLibraryProject.Models.ItemTypeLookup", "ItemTypeNavigation")
                        .WithMany("LibraryItem")
                        .HasForeignKey("ItemType")
                        .HasConstraintName("FK_LibraryItem_ItemTypeLookup");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.LibraryMember", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.CurrentlySuspendedLookup", "CurrentlySuspendedNavigation")
                        .WithMany("LibraryMember")
                        .HasForeignKey("CurrentlySuspended")
                        .HasConstraintName("FK_LibraryMember_CurrentlySupsendedLookup");

                    b.HasOne("FinalLibraryProject.Models.MemberTypeLookup", "MemberTypeNavigation")
                        .WithMany("LibraryMember")
                        .HasForeignKey("MemberType")
                        .HasConstraintName("FK_LibraryMember_MemberTypeLookup");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.Transactions", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.LibraryMember", "Library")
                        .WithMany("Transactions")
                        .HasForeignKey("LibraryId")
                        .HasConstraintName("FK_Transactions_LibraryMember");
                });

            modelBuilder.Entity("FinalLibraryProject.Models.WaitList", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.LibraryItem", "Item")
                        .WithMany("WaitList")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_WaitList_LibraryItem");

                    b.HasOne("FinalLibraryProject.Models.LibraryMember", "Library")
                        .WithMany("WaitList")
                        .HasForeignKey("LibraryId")
                        .HasConstraintName("FK_WaitList_LibraryMember");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalLibraryProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FinalLibraryProject.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
